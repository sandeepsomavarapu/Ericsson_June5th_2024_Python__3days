

Language:
----------

	communication-->human
	

Programming Language:
=====================	
		communication-->machine

		-->software--->set of programs-->set of instructions


python,java,c,c++,.net

			POP       		    OOP				microsoft
B,BCPL,C,COBOL,Photon.....		c++,java,python,.net......


			1)performance		inheritance,polymorphisam
			
			2)security     		encapsulation,abstraction
			
			
			
			
	python:
				Easy 
				
				
				python -->guido van rossam -->1991
				
					feb 20th 1991
			
			
java	53

class Welcome{

	public static void main(String args[]){
	
	System.out.println("welcome to java")
	
	}
}
javac filename.java
java classname
			
python:		30+	
			
			
			
1)functional programming features from C
2)OOP features from C++
3)scripting lang features shellscript
4)modular programming features from modula-3

			syntax-->C,ABC
			

1)Desktop apps			core python,tkinter	
			
2)web apps				Django,flask

3)db apps				PDBC	

4)networking programming 

5)gaming apps

6)data analysis

7)ML

8)AI

10)DS

11)IOT		
			
			
			
	1.x			
			
	2.x		2000

	3.x		2008
	
		3.12.3
			
			
features:
==========

1)simple and easy to learn			

2)freeware and open source    jython

3)high level 

4)protable

5)dynamic typed					int age=123;static typed
									age=123 dynamic typed		
6)platform independent

7)rich library
		


flavors:
		jython javapython
		cpython
		ironpython


Identifiers:
============
any name in python will call it as identifier 
	variable,class name,obj name,interface,method ....
	
	
		a-z
		A-Z
		0-9
		_
	
Datatypes:
============	
	
	int
	str		'' ""  """  """  ''' '''
	float
	bool
	range
	complex
	
	list
	set
	tuple
	dict
	frozenset
	
	import keyword
	keyword.kwlist
	
	['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue',
	'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import',
	'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 
	'with', 'yield']
	
	
	
typecasting 



input	
	
	
	
		"12"+"13"
	
	
	
		int()
		bool()
		float()
		complex()
		str()
		input()
		id()
		type()
		
		
Fundamental DT Immutable-->non-changable	
	
	one value 
	
	
	
	list
	set
	tuple
	dict
	frozenset
	
	
LIST:
=====
	
	To represent group of objects as a single entity 
		1)duplicates are allowed
		2)insertion order is preserved 
		3)Homogeneous and Heterogeneous are allowed
		4)growable in nature
		5)[]
		6)muttable 


		list=[12,23,12,55,32,53] 
		list1=[12,2.3,"suresh",True,12+5j] 
Tuple:
======
	To represent group of objects as a single entity 
		1)duplicates are allowed
		2)insertion order is preserved 
		3)Homogeneous and Heterogeneous are allowed
		4)not growable in nature
		5)()
		6)imuttable 
		
		
Set:		
=====		
		To represent group of objects as a single entity 
		1)duplicates are not allowed
		2)insertion order is not  preserved 
		3)Homogeneous and Heterogeneous are allowed
		4) growable in nature
		5){}
		6)muttable 	
		
FrozenSet:		
=========		
		To represent group of objects as a single entity 
		1)duplicates are not allowed
		2)insertion order not is preserved 
		3)Homogeneous and Heterogeneous are allowed
		4)not growable in nature
		5)forzenset()
		6)imuttable 			
		
Dict:
=====		
		
			To represent group of objects as a key,value(entry)
		1)duplicate keys are not allowed values can be duplicate
		2)insertion order not is preserved 
		3)Homogeneous and Heterogeneous are allowed
		4)growable in nature
		5){}
		6)muttable 	
		
		.py
		
		functional programming 
		
			more concise 
			
			lambda
		
		def add(a,b):
			..
			..
			..
			return a+b
			
			
			add(1,2)
			def ,return,methodname,()
			
			x=lambda a,b:a+b
			
			
		R
		A
		W
			
			
			
			
			ctrl+~
			
			

Inheritance:
=============

class A:



class B(A):



Multiple inheritance

	many parents and single child
	
	single
	multi level
	multiple
	hirarchie
	

	class A				class B
	
		m2()			m1()
	
	
	
		class C(B,A)
			
				c=C()
				c.m1()
			
			__init__(self)
			
			
	class Test:
		marks=123
		name="sandeep"		#pvm  __init__()
		
		def m1():
		
			return "welcome"
		
		def m2():
		
	test=Test()	#constructor calling
		
		
Exception Handling:
===================		



	1) system defined error message 
	
	Traceback (most recent call last):
  File "D:\Python FullStack\PDW F Folder\PYTHON\PYTHON\examples\core ex\4 elseif.py", line 4, in <module>
    Totalmarks = int(input(" Please Enter Your Total Marks:  "))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: invalid literal for int() with base 10: 'sandeep'
	
	2)abnormal termination
	
	
	1	---->stop
	2
	3
	
	
	
	
	10000
	
	
	
	Enter marks only in numbers 
	
	
		
		user friendly error message 
		
		normal termination
			
			
	Exception hirarchie:
	===================
	
								BaseException
								
						Exception		


	keywords
	
	
		try		--->error code /risky code 
		
		except  ---->handling code 
		
		finally --->cleanup code 
		
		raise	-->to raise an exception explicitly 
		
		
		user defined exception
		
1)	class InvalidCredentials(Exception)

2)  parametrized constructor 
		
		
		
1)		try:								invalid							
			print("hello")
			
2)		except:								invalid

3)		else:								invalid			

4)		finally:							invalid

5)		try:
											 valid
		except:	
		
6)		try:
											 valid	
		finally:

7)		try :
		except :							 valid
		else:
		
8)		try:								invalid
		else:					

9)		try:								invalid
		else:								
		finally:
		
10)		try:								valid
		except XXX:
		except XXX:
		
11)		try:
		except:
		except:								invalid
		finally:
		finally:

12)    try:
			print("inside try")
	   print("outside try")					invalid
	   except XXX:
			
13)		try
		except
		try									valid
		except
		try
		except
		
14)		try:
			try:							valid
			except:
			finally:
		except:
15)		try:
			
		except:
			try:							valid
			except:
			finally:
					



take the age from end user if age is below 18 raise invalidage exception else print allowed to vote 








